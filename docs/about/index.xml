<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>はじめに on Fujitsu Agile Development Guide</title><link>http://example.org/docs/about/</link><description>Recent content in はじめに on Fujitsu Agile Development Guide</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://example.org/docs/about/index.xml" rel="self" type="application/rss+xml"/><item><title>アジャイル開発にようこそ</title><link>http://example.org/docs/about/welcometoagile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/about/welcometoagile/</guid><description>アジャイル開発にようこそ # アジャイルソフトウェア開発宣言</description></item><item><title>アジャイルソフトウェア開発宣言</title><link>http://example.org/docs/about/agilemanifest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/about/agilemanifest/</guid><description>アジャイルソフトウェア開発宣言 # アジャイル開発とはなにかという問いに対して簡潔に答えるとすると、 「アジャイルソフトウェア開発宣言のマインドに則り、アジャイル開発12の原則に従った開発」 となります。 ではさっそく アジャイルソフトウェア開発宣言 に目を通してみましょう。
アジャイルソフトウェア開発宣言 私たちは、ソフトウェア開発の実践 あるいは実践を手助けをする活動を通じて、 よりよい開発方法を見つけだそうとしている。 この活動を通して、私たちは以下の価値に至った。 プロセスやツールよりも個人と対話を、 包括的なドキュメントよりも動くソフトウェアを、 契約交渉よりも顧客との協調を、 計画に従うことよりも変化への対応を、 価値とする。すなわち、左記のことがらに価値があることを 認めながらも、私たちは右記のことがらにより価値をおく。 この宣言はKent BeckやRobert C. Martin(アンクルボブ)といった著名なソフトウェア開発者らによって2001年に生み出されました。 「プロセスやツールよりも個人との対話」「包括的な毒面とよりも動くソフトウェア」「契約交渉よりも顧客との協調」「計画に従うことよりも変化への対応」 これら4つがアジャイル開発において遵守すべきマインドセットとして宣言されています。
まずこれらについてまず噛み砕いて理解してみましょう。
プロセスやツールよりも個人との対話 # これはどういうことかというと 「信頼し合う個人間でのコミュニケーションが最良」、 「プロセスを守ることが常に正しいとは限らない」、 「ツールに「使われている」状態を避ける」 ということです。
アジャイル開発ではメンバー間の密なコミュニケーションを重視します。 例えばプロジェクトのコミュニケーションツールとして、 メールやメーリングリストを使うことは往々にしてよくあります。 チーム間の連絡に連絡票のようなものを使うこともあるでしょう。 しかし、そうした伝票やツールでのやり取りはとても時間がかかります。 それよりも直接対話したほうが問題の解決が早い場面は非常に多いということをここでは言っています。
また、アジャイル開発ではプロセスは常に見直されます。 アジャイル開発の重要なキーワードとして変化への俊敏な対応というのがあります。 これはプロダクトだけでなく、チームの開発プロセスについても必要に応じて自律的にどんどん変化させていきます。 アジャイル開発においてチームに適した開発プロセスはチームによって異なります。 もちろん、XPやスクラムといった基本的な考え方はありますが、それが本当にそのチームに適しているかはわかりません。 プロダクトの開発を進めていく中、チームごとに開発プロセスは最適化され変化していきます。
包括的なドキュメントよりも動くソフトウェア # 最終的なエンドユーザーが求めているものはなにかというと、 それはプロダクトそのものになります。 プロダクトを作成するための設計書をいくら作り込んだところで、 利用者にはなんのメリットはなく、そこに注力すべきでありません。 私達が注力するべきはプロダクトそのものに他なりません。
さらに、設計書は書き捨てが許されず、書いたあともメンテし続けないといけません。 しかし、アジャイル開発ではプロダクトの仕様はどんどん変化していきます。 その変化に合わせて設計書もメンテしていくのは非常に大変です。 設計書をメンテして、それでいてプロダクトも迅速にリリースして、両者を両立させるのが困難だというのは想像に難くないでしょう。
プロダクトの設計書は不要だと分かりました。ではプログラムのコメントについてはどうでしょうか？
これも不要だというのがアジャイルの考え方です。 どういうことかというと、そもそも一読して理解できないようなプログラムを書いてはいけないということです。 アジャイル開発者は読みやすいきれいなコードを書き、それを維持する努力をしていかなければなりません。
では、アジャイル開発においてドキュメントは一切不要でしょうか？
答えはNOです。例えば、今まさにあなたが読んでいるこのドキュメントは、 アジャイル人材を育成し、チームをスケールしていくために必要なものです。 この他にも人員がプロジェクトに新たにアサインされたときに読むオンボーディングの資料はあったほうがいいでしょう。
プロジェクトに応じて必要な文書は異なりますが、必要に応じて必要なドキュメントだけを作ることが大事です。
契約交渉よりも顧客との協調 # これまでのSIビジネスにおいては顧客とベンダーという関係があり、 ベンダーは請負契約に則って、要件定義で定義した機能を充足するシステムを作ることが求められてきました。 しかし、開発を進めていく中で対応が難しい課題がでてきたり、 もっとこうしたらプロダクトは良くなるのにと思う場面がでてくるのはよくある話です。</description></item><item><title>アジャイル開発12の原則</title><link>http://example.org/docs/about/agileprinciple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/about/agileprinciple/</guid><description>アジャイル開発12の原則 # アジャイルソフトウェア開発宣言 で宣言されていた内容は、 アジャイル開発をする上で大事なマインドセットを述べたものでした。 ではその背景にもなる アジャイル開発12の原則 を見ていきましょう。先のアジャイルソフトウェア開発宣言のページにリンクがあります。
アジャイル宣言の背後にある原則 私たちは以下の原則に従う: 顧客満足を最優先し、 価値のあるソフトウェアを早く継続的に提供します。 要求の変更はたとえ開発の後期であっても歓迎します。 変化を味方につけることによって、お客様の競争力を引き上げます。 動くソフトウェアを、2-3週間から2-3ヶ月という できるだけ短い時間間隔でリリースします。 ビジネス側の人と開発者は、プロジェクトを通して 日々一緒に働かなければなりません。 意欲に満ちた人々を集めてプロジェクトを構成します。 環境と支援を与え仕事が無事終わるまで彼らを信頼します。 情報を伝えるもっとも効率的で効果的な方法は フェイス・トゥ・フェイスで話をすることです。 動くソフトウェアこそが進捗の最も重要な尺度です。 アジャイル･プロセスは持続可能な開発を促進します。 一定のペースを継続的に維持できるようにしなければなりません。 技術的卓越性と優れた設計に対する 不断の注意が機敏さを高めます。 シンプルさ（ムダなく作れる量を最大限にすること）が本質です。 最良のアーキテクチャ・要求・設計は、 自己組織的なチームから生み出されます。 チームがもっと効率を高めることができるかを定期的に振り返り、 それに基づいて自分たちのやり方を最適に調整します。 次はこれについて読み解いてみましょう。
顧客満足を最優先し、価値のあるソフトウェアを早く継続的に提供する # 開発者にとって最も重要な活動は顧客のビジネスを成功させ満足させることです。 そのため、価値のあるソフトウェアを素早く継続的に提供する必要があります。
ウォーターフォールモデルにおいて、開発の目的はQCDの達成でした。 これは、顧客とベンダの間で請負契約があり、 ベンダは決められた納期までに、予算内に、品質を担保してプロダクトを提供する必要があるためです。 しかし、アジャイル開発では前述の通り、準委任契約が前提になります。 顧客とベンダは共同でエンドユーザに価値のあるソフトウェアを提供することを共に目指していきます。 そのため、アジャイル開発において、開発の目的はQCDの達成ではありません。 もちろんバグがないこと、コストを下げること、納期を守ることは大事です。 しかし、エンドユーザに価値のあるソフトウェアを素早く継続的に提供することが最も目指すべきものです。 その目的を見失ってはいけません。
要求の変更はたとえ開発の後期であっても歓迎する # 開発者は価値があるのであれば変更を積極的に受け入れます。 価値があるのであればというのが大事なポイントです。 顧客に言われるがままに変更を受け入れるようなことはしません。
では価値があるかどうかはどうやって見極めるのでしょうか？
価値があるかどうかはエンドユーザが見極めます。 「開発もしてないのにどうやって？」と思われるかもしれませんが、 それを検証する仮説検証というプロセスがアジャイル開発にはあります。 プロトタイプを作って実際にユーザにヒアリングを行うのです。 そうして、この機能は作ったほうがエンドユーザにとって利益があると分かって初めて開発に着手します。
すなわち要求の変更があるということは、 改善につながる要求は新しい価値を見つけた証拠にほかなりません。 要求の変更は「新しい価値」の発見の機会と捉え変更を前向きに受け入れることが大事です。
動くソフトウェアを2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースする #</description></item></channel></rss>