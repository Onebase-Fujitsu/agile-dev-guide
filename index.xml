<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>富士通アジャイルデベロップメントガイドブック on Fujitsu Agile Development Guide</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/</link><description>Recent content in 富士通アジャイルデベロップメントガイドブック on Fujitsu Agile Development Guide</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Wed, 04 Aug 2021 14:37:44 +0900</lastBuildDate><atom:link href="https://onebase-fujitsu.github.io/agile-dev-guide/index.xml" rel="self" type="application/rss+xml"/><item><title>はじめに</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/introduction/</guid><description>はじめに # // TODO !このセクションは最後に書きます。 では早速アジャイルとは何かについて学んでいきましょう。 アジャイルとは</description></item><item><title>アジャイルソフトウェア開発宣言</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/manifest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/manifest/</guid><description>アジャイルソフトウェア開発宣言 # アジャイル開発とはなにかという問いに対して簡潔に答えるとすると、 「アジャイルソフトウェア開発宣言のマインドに</description></item><item><title>アジャイル開発に求められるソフトウェア設計</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/about/</guid><description>アジャイル開発に求められるソフトウェア設計 # アジャイル開発では開発の途中で求められるソフトウェア仕様がどんどん変化します。 そのため、変化に強</description></item><item><title>エクストリームプログラミングとは</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/overview/</guid><description>エクストリームプログラミングとは # エクストリームプログラミング（以下、XP）はアジャイルソフトウェア開発宣言をだしたメンバーの一人、 Kent Bec</description></item><item><title>ソフトウェアテストを始めよう</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/overview/</guid><description>ソフトウェアテストを始めよう # ここまでアジャイルやスクラム、XPについて学んできました。 それぞれ、マインドセットや枠組みの話でしたので 「結局</description></item><item><title>デザインパターン</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/designpattern/designpattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/designpattern/designpattern/</guid><description>デザインパターンとは # 後日執筆予定</description></item><item><title>単一責任の原則(SRP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/srp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/srp/</guid><description>単一責任の原則(The Single Responsibility Principle) # 単一責任の原則(SRP)とはなにか？ # 単一責任の原則(SRP)とはクラスを変更する理由は1つ以上存在してはなら</description></item><item><title>アジャイル開発12の原則</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/principle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/principle/</guid><description>アジャイル開発12の原則 # アジャイルソフトウェア開発宣言 で宣言されていた内容は、 アジャイル開発をする上で大事なマインドセットを述べたものでし</description></item><item><title>ウォーミングアップ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/fizzbuzz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/fizzbuzz/</guid><description>ウォーミングアップ # ここではテスト駆動開発の手法で極々簡単なコンソールアプリケーションを作ってみようと思います。 開発言語はここではJavaを</description></item><item><title>エクストリームプログラミングのプラクティス</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/practice/</guid><description>エクストリームプログラミングのプラクティス # チームメンバーとしての顧客 # 顧客と開発者は同じ空間で机を突き合わせて、親密に仕事をするのが望まし</description></item><item><title>オープン・クローズドの原則(OCP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/ocp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/ocp/</guid><description>オープン・クローズドの原則(The Open Closed Principle) # オープン・クローズドの原則(OCP)とはなにか？ # オープン・クローズドの原則(OCP)とは ソフトウ</description></item><item><title>まとめ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/conclude/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/conclude/</guid><description>まとめ # アジャイルソフトウェア開発宣言とアジャイル開発12の原則まで読んできました。 実はここまで具体的な開発手法は一つもでてきていません。す</description></item><item><title>まとめ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/conclude/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/conclude/</guid><description>まとめ #</description></item><item><title>ボウリングゲーム</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/bowlinggame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/bowlinggame/</guid><description>ボウリングゲーム # 最初の一歩ではウォーミングアップとしてFizzBuzzを書いてみました。 ここでは少しだけ難易度を上げたより実践的な例として</description></item><item><title>リスコフの置換原則(LSP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/lsp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/lsp/</guid><description>リスコフの置換原則(The Liskov Substitution Principle) # リスコフの置換原則(LSP)とはなにか？ # リスコフの置換原則(LSP)とは 派生型はその基本型と置換可能でな</description></item><item><title>テストダブル</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/testdouble/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/testdouble/</guid><description>テストダブル # テスト駆動開発の開発の流れがわかってきたところで、次にテストダブルを使用したテストについて学んでいきましょう。 テストダブルとは</description></item><item><title>依存性逆転の原則(DIP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/dip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/dip/</guid><description>依存性逆転の原則(The Dependency Inversion Principle) # 依存性逆転の原則とは # 依存性逆転の原則(DIP)とは 上位のモジュールは下位のモジュールに依存してはいけない。</description></item><item><title>E2Eテスト</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/e2e/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/e2e/</guid><description>E2Eテスト # E2Eテストとは # ここまでソフトウェアの単体テストやインテグレーションテストのやり方を見てきました。 しかし、ServerやCl</description></item><item><title>インターフェース分離の原則(ISP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/isp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/isp/</guid><description>インターフェース分離の原則(The Interface Segregation Principle) # インタフェース分離の原則とは # インターフェス分離の原則(ISP)とは クライアントにクライアントが利</description></item><item><title>おわりに</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/inclosing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/inclosing/</guid><description>おわりに # まず、あなたは本書を最後まで読み切りました！お疲れさまです！ あなたはアジャイル開発者への第一歩を踏み出しました。 「本書を理解したら</description></item><item><title>推奨書籍</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/recommendedbooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/recommendedbooks/</guid><description>推奨書籍 # アジャイル # aaa #</description></item></channel></rss>