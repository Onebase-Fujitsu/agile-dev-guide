<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>富士通アジャイルデベロップメントガイドブック on Fujitsu Agile Development Guide</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/</link><description>Recent content in 富士通アジャイルデベロップメントガイドブック on Fujitsu Agile Development Guide</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Wed, 04 Aug 2021 14:37:44 +0900</lastBuildDate><atom:link href="https://onebase-fujitsu.github.io/agile-dev-guide/index.xml" rel="self" type="application/rss+xml"/><item><title>1日目</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day1/</guid><description>1日目 # アプリケーションの要件 # では、早速アジャイル開発で実際に動くアプリケーションを作ってみましょう。 今回は、簡単な例としてタスク管理のア</description></item><item><title>はじめに</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/introduction/</guid><description>はじめに # 近年アジャイルや内製化が叫ばれて久しいですが、それは弊社でも同じです。 しかし、アジャイル開発はこれまで行われてきたウォーターフォー</description></item><item><title>アジャイルソフトウェア開発宣言</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/manifest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/manifest/</guid><description>アジャイルソフトウェア開発宣言 # アジャイル開発とはなにかという問いに対して簡潔に答えるとすると、 「アジャイルソフトウェア開発宣言のマインドに</description></item><item><title>アジャイル開発に求められるソフトウェア設計</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/about/</guid><description>アジャイル開発に求められるソフトウェア設計 # アジャイル開発では開発の途中で求められるソフトウェア仕様がどんどん変化します。 そのため、変化に強</description></item><item><title>エクストリームプログラミングとは</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/overview/</guid><description>エクストリームプログラミングとは # エクストリームプログラミング（以下、XP）はアジャイルソフトウェア開発宣言をだしたメンバーの一人、 Kent Bec</description></item><item><title>スクラムとは</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/overview/</guid><description>スクラムとは # スクラムはアジャイルの開発手法の1つです。1990年代にJeff SutherlandとKen Schwaberによって策定されま</description></item><item><title>ソフトウェアテストを始めよう</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/overview/</guid><description>ソフトウェアテストを始めよう # ここまでアジャイルやスクラム、XPについて学んできました。 それぞれ、マインドセットや枠組みの話でしたので 「結局</description></item><item><title>デザインパターン</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/designpattern/designpattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/designpattern/designpattern/</guid><description>デザインパターンとは # 後日執筆予定</description></item><item><title>ペルソナ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/persona/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/persona/</guid><description>ペルソナ # Description ターゲットユーザーをひとりの人間にみたて、チームで認識を合わせる。 以下を記入 FACT BEHAVIOR NEEDS &amp;amp; GOAL 名前と簡単なイラスト 現時点での理解（アサン</description></item><item><title>ユーザストーリーマッピング</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/userstory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/userstory/</guid><description>ユーザーストーリーマッピング # Describtion ペルソナがソフトウェアを使う流れ（ストーリー）と、必要となる情報や機能を整理し、開発すべきものをチーム内で意</description></item><item><title>単一責任の原則(SRP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/srp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/srp/</guid><description>単一責任の原則(The Single Responsibility Principle) # 単一責任の原則(SRP)とはなにか？ # 単一責任の原則(SRP)とはクラスを変更する理由は1つ以上存在してはなら</description></item><item><title>2日目</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day2/</guid><description>2日目 # 2日目はClientがServerに対してHTTPリクエストを実行するところ、そして、Serverの初期設定をして簡単なAPIを作っ</description></item><item><title>アジャイル開発12の原則</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/principle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/principle/</guid><description>アジャイル開発12の原則 # アジャイルソフトウェア開発宣言 で宣言されていた内容は、 アジャイル開発をする上で大事なマインドセットを述べたものでし</description></item><item><title>ウォーミングアップ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/fizzbuzz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/fizzbuzz/</guid><description>ウォーミングアップ # ここではテスト駆動開発の手法で極々簡単なコンソールアプリケーションを作ってみようと思います。 開発言語はここではJavaを</description></item><item><title>エクストリームプログラミングのプラクティス</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/practice/</guid><description>エクストリームプログラミングのプラクティス # チームメンバーとしての顧客 # 顧客と開発者は同じ空間で机を突き合わせて、親密に仕事をするのが望まし</description></item><item><title>オープン・クローズドの原則(OCP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/ocp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/ocp/</guid><description>オープン・クローズドの原則(The Open Closed Principle) # オープン・クローズドの原則(OCP)とはなにか？ # オープン・クローズドの原則(OCP)とは ソフトウ</description></item><item><title>シナリオ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/scenario/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/scenario/</guid><description>シナリオ # Description ターゲットユーザーがどのような流れでソフトウェアを利用するかを時系列で具体的に記入したもの もっとも基本的なシナリオ(happy p</description></item><item><title>ロール</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/roles/</guid><description>ロール # スクラムではアジャイル開発チームにおける役割を3つ規定しています。 プロダクトオーナー プロダクト開発チーム スクラムマスター それぞれにつ</description></item><item><title>3日目</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day3/</guid><description>3日目 # 2日目まででタスク一覧をサーバに対して要求して、レスポンスに応じてタスク一覧を画面に描画するフロントエンドができました。 ただ、現時点</description></item><item><title>まとめ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/conclude/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/conclude/</guid><description>まとめ # アジャイルソフトウェア開発宣言とアジャイル開発12の原則まで読んできました。 実はここまで具体的な開発手法は一つもでてきていません。す</description></item><item><title>まとめ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/conclude/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/conclude/</guid><description>まとめ # エクストリームプログラミング(XP)はシンプルかつ具体的な集合から構築されているアジャイル開発プロセスです。 そして、この開発プロセス</description></item><item><title>ボウリングゲーム</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/bowlinggame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/bowlinggame/</guid><description>ボウリングゲーム # 最初の一歩ではウォーミングアップとしてFizzBuzzを書いてみました。 ここでは少しだけ難易度を上げたより実践的な例として</description></item><item><title>リサーチ計画立案</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/researchplanning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/researchplanning/</guid><description>リサーチ計画立案 # Description 次回のユーザーリサーチで検証すべき仮説と、その検証方法について計画する。 リサーチのテーマ（問い）の設定 優先度の高いリスク</description></item><item><title>リスコフの置換原則(LSP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/lsp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/lsp/</guid><description>リスコフの置換原則(The Liskov Substitution Principle) # リスコフの置換原則(LSP)とはなにか？ # リスコフの置換原則(LSP)とは 派生型はその基本型と置換可能でな</description></item><item><title>リーンスタートアップ働き方</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/overview/iteration/agileworkingstyle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/overview/iteration/agileworkingstyle/</guid><description>ONEbaseでの働き方 # 心理的な安全性のあるチームで、安定したペースでの開発を目指します。 # ペアワーク すべて作業をペアワークで行きます。 手</description></item><item><title>成果物</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/products/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/products/</guid><description>成果物 # スクラムガイドにおいてスクラムチームが作成するべき成果物は3つ規定されています。 プロダクトバックログ スプリントバックログ インクリメン</description></item><item><title>4日目</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day4/</guid><description>4日目 # 3日まででReact+Reduxで作ったフロントエンドとSpring Bootで作ったバックエンドを連携させることができました。 しかし</description></item><item><title>イベント</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/events/</guid><description>イベント # 画像出典: アジャイル開発とは（中編） ちょうど富士通の公開ページにスクラムのプロセスを解説している図があったため、これを使って説明し</description></item><item><title>テストダブル</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/testdouble/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/testdouble/</guid><description>テストダブル # テスト駆動開発の開発の流れがわかってきたところで、次にテストダブルを使用したテストについて学んでいきましょう。 テストダブルとは</description></item><item><title>プロトタイピング</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/prototyping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/prototyping/</guid><description>プロトタイピング # Description ソフトウェアのUIデザインを行う。 シナリオに沿って、画面遷移と各画面の レイアウトを検討 満たすべき要求を整理し、各自ラフス</description></item><item><title>依存性逆転の原則(DIP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/dip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/dip/</guid><description>依存性逆転の原則(The Dependency Inversion Principle) # 依存性逆転の原則とは # 依存性逆転の原則(DIP)とは 上位のモジュールは下位のモジュールに依存してはいけない。</description></item><item><title>5日目</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day5/</guid><description>5日目 # ではTodoを作成するバックエンドAPIを作成していきましょう。 タスク作成バックエンドAPI # テスト # まず、サーバのテストを書いてみ</description></item><item><title>E2Eテスト</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/e2e/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/e2e/</guid><description>E2Eテスト # E2Eテストとは # ここまでソフトウェアの単体テストやインテグレーションテストのやり方を見てきました。 しかし、ServerやCl</description></item><item><title>まとめ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/conclude/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/conclude/</guid><description>まとめ # ここまでスクラムのロール、スクラムチームが作成すべき成果物、そしてスクラムチームの開発の流れを見てきました。 ここで説明した内容をプラ</description></item><item><title>インターフェース分離の原則(ISP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/isp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/isp/</guid><description>インターフェース分離の原則(The Interface Segregation Principle) # インタフェース分離の原則とは # インターフェス分離の原則(ISP)とは クライアントにクライアントが利</description></item><item><title>スクリプト</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/script/</guid><description>スクリプト # Description リサーチ当日の流れや確認事項を整理したトークスクリプトを作成する。 記載内容 ターゲットユーザー 今回のリサーチの目的、検証したい仮</description></item><item><title>6日目</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day6/</guid><description>6日目 # クライアントとサーバを連携させてタスクを作成することができるようになったので、シナリオテストを作成していきましょう。 モノレポの作成 #</description></item><item><title>リサーチ実施</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/researchacction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/researchacction/</guid><description>リサーチ実施 # Description 仮説を検証するための情報を得るため、ユーザーにインタビューしたり、ユーザーテストなどを行う。 スクリプトにそって、リサーチを実</description></item><item><title>シンセサイズ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/synthesize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/synthesize/</guid><description>シンセサイズ # Description リサーチの結果から、仮説は検証されたか、あらたな発見があったかなどをまとめ、学びとして蓄積する。 確認事項別に、ユーザーの発言</description></item><item><title>おわりに</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/inclosing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/inclosing/</guid><description>おわりに # まず、あなたは本書を最後まで読み切りました！お疲れさまです！ あなたはアジャイル開発者への第一歩を踏み出しました。 「本書を理解したら</description></item><item><title>推奨書籍</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/recommendedbooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/recommendedbooks/</guid><description>推奨書籍 # ここでは特定の言語、アーキテクチャに依存しないものを推挙しています。 リーダブルコード # https://www.amazon.co.jp/dp/4873115655/ ここで紹介するまでも無いと思いますが、チー</description></item></channel></rss>